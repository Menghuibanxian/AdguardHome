name: AdGuard Rules Merger

on:
  # 定时运行，每10分钟执行一次
  schedule:
    - cron: '*/10 * * * *'
  # 允许手动触发工作流
  workflow_dispatch:

jobs:
  merge-adguard-rules:
    runs-on: ubuntu-latest
    permissions:
      contents: write  # 需要写权限来提交更改
    
    steps:
      - name: 检出代码库
        uses: actions/checkout@v3
        with:
          fetch-depth: 0  # 确保获取所有历史记录
          persist-credentials: false  # 禁用默认凭据，使用GitHub令牌
      
      - name: 设置Python环境
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'  # 使用Python 3.10版本
      
      - name: 安装依赖
        run: |
          python -m pip install --upgrade pip
          pip install requests  # 我们的脚本需要requests库
      
      - name: 运行AdGuard规则合并脚本
        run: |
          python scripts/adguard_rules_merger.py
      
      - name: 配置Git环境
        run: |
          # 配置Git用户信息
          git config --global user.name 'GitHub Actions'
          git config --global user.email 'github-actions@github.com'
      
      - name: 添加规则文件
        run: |
          # 添加所有规则文件
          git add Black.txt White.txt scripts/colorful.txt
      
      - name: 提交更改并推送
        run: |
          # 使用--allow-empty确保即使没有变更也创建提交
          git commit --allow-empty -m "Update AdGuard rules $(date +'%Y-%m-%d %H:%M:%S')"
          
          # 设置分支变量，提取github.ref中的分支名
          BRANCH_NAME=${GITHUB_REF#refs/heads/}
          echo "推送至分支: $BRANCH_NAME"
          
          # 使用统一的x-access-token方式进行推送，更安全且统一
          git push https://x-access-token:${{ secrets.GITHUB_TOKEN }}@github.com/${{ github.repository }}.git HEAD:$BRANCH_NAME
          
          # 捕获错误并提供清晰的日志
          if [ $? -ne 0 ]; then
            echo "推送失败，退出代码: $?"
            echo "请检查GitHub Actions权限设置和分支保护规则"
            exit 1
          fi
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}  # GitHub Actions自动提供的令牌
